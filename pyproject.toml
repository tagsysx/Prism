[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "prism-rf"
dynamic = ["version"]
description = "Wideband RF Neural Radiance Fields for OFDM Communication"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Prism Project Team", email = "contact@prism-project.org"}
]
maintainers = [
    {name = "Prism Project Team", email = "contact@prism-project.org"}
]
keywords = [
    "neural-radiance-fields",
    "rf-signals", 
    "ofdm",
    "mimo",
    "wireless-communication",
    "deep-learning",
    "pytorch",
    "computer-vision",
    "signal-processing"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Physics",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
]
requires-python = ">=3.8"
dependencies = [
    "torch>=1.9.0",
    "torchvision>=0.10.0",
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "matplotlib>=3.4.0",
    "pyyaml>=5.4.0",
    "tqdm>=4.62.0",
    "tensorboard>=2.7.0",
    "scikit-learn>=1.0.0",
    "h5py>=3.1.0",
    "pandas>=1.3.0",
    "seaborn>=0.11.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "black>=21.0",
    "flake8>=3.8",
    "mypy>=0.800",
    "pre-commit>=2.0",
]
docs = [
    "sphinx>=4.0",
    "sphinx-rtd-theme>=1.0",
    "myst-parser>=0.15",
]
notebooks = [
    "jupyter>=1.0",
    "ipykernel>=6.0",
]

[project.urls]
Homepage = "https://github.com/tagsysx/Prism"
Documentation = "https://github.com/tagsysx/Prism#readme"
Repository = "https://github.com/tagsysx/Prism.git"
"Bug Tracker" = "https://github.com/tagsysx/Prism/issues"

[project.scripts]
prism-train = "prism.scripts.train:main"
prism-test = "prism.scripts.test:main"
prism-demo = "prism.scripts.demo:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
